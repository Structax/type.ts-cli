import { writeFile } from "fs/promises"
import { resolve } from "path"
import { resolveRoutes } from "../packages/core/resolveRoutes"

const OUT_FILE = resolve("gen/client.ts")

const toClientFunctionName = (method: string, path: string): string => {
  const cleanPath = path
    .replace(/^\//, "")
    .replace(/\[([^\]]+)\]/g, "_$1")
    .replace(/[^a-zA-Z0-9]/g, "_")
  return `fetch${method[0] + method.slice(1).toLowerCase()}_${cleanPath}`
}

const generate = async () => {
    const routes = resolveRoutes(resolve("examples/routes"))
  const lines: string[] = [`// 🛠️ Auto-generated by generate-client.ts\n`]

  for (const route of routes) {
    const mod = await import(route.filePath)
    const api = mod.api
    if (!api || !api.input || !api.handler) continue

    const fnName = toClientFunctionName(route.method, route.path)
    const method = route.method.toUpperCase()
    const path = route.path

    lines.push(
      `export const ${fnName} = async (input: any) => {`,
      `  const res = await fetch("${path}", {`,
      `    method: "${method}",`,
      `    headers: { "Content-Type": "application/json" },`,
      `    body: JSON.stringify(input),`,
      `  })`,
      `  return res.json()`,
      `}\n`
    )
  }

  await writeFile(OUT_FILE, lines.join("\n"), "utf-8")
  console.log(`✅ Generated client: ${OUT_FILE}`)
}

generate()